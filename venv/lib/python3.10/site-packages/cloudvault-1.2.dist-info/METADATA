Metadata-Version: 2.1
Name: cloudvault
Version: 1.2
Summary: A Django package for managing file uploads to cloud[Cloudinary]. It is an alternative for AWS S-3 Bucket.
Home-page: https://github.com/codewitgabi/cloudvault
Author: Gabriel Michael Ojomakpene (codewitgabi)
Author-email: codewitgabi222@gmail.vom
License: MIT-licence
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 3.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Django (>=3.2)
Requires-Dist: cloudinary (>=1.33.0)

# Project Description
**cloudvault** 

cloudvault is a django package for file upload similar to using AWS S3-Bucket. It uses the **Cloudinary** Platform which is cheaper and easier to integrate.

Quickly deploy or test your django application using `cloudvault`.

## Installation

```
pip install cloudvault
```

## Quick Start

1. Add "cloudvault" to your `INSTALLED_APPS` in settings.py

```
INSTALLED_APPS = [
    # other apps
    "cloudvault",
]
```

2. Configure your `Cloudinary settings`

```
CLOUDINARY = [
    "cloud_name": "",
    "api_key": "",
    "api_secret": ""
]
```

3. Change `DEFAULT_FILE_STORAGE` in your settings.py

```
DEFAULT_FILE_STORAGE = "cloudvault.cloud_storage.CloudinaryStorage"
```

4. You can now upload image, videos from here.

